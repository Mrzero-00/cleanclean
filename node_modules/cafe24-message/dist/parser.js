"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var interface_1 = require("./interface");
var api_1 = require("./api");
function makeMultipartData(data) {
    var boundary = Math.random()
        .toFixed(12)
        .substr(2);
    var dataString = "";
    for (var key in data) {
        var value = Buffer.from(data[key]).toString("base64");
        var length_1 = Buffer.from(value).byteLength;
        dataString +=
            "--" + boundary + "\n" +
                ("Content-Disposition: form-data; name=\"" + key + "\"\n") +
                ("Content-Length: " + length_1 + "\n") +
                ("\n" + value + "\n");
    }
    dataString += "--" + boundary + "--";
    var contentType = "multipart/form-data; boundary=" + boundary;
    var contentLength = Buffer.from(dataString).byteLength;
    var multipartHeaders = {
        "Content-Type": contentType,
        "Content-Length": contentLength.toString()
    };
    return { dataString: dataString, multipartHeaders: multipartHeaders };
}
exports.makeMultipartData = makeMultipartData;
function makeMessageSendData(form, config, forceMessageType) {
    var length = Buffer.byteLength(form.body);
    var sphone = config.phone.split("-");
    var data = {
        user_id: config.userId,
        secure: config.secret,
        sphone1: sphone[0],
        sphone2: sphone[1],
        sphone3: sphone[2],
        rphone: form.phone,
        smsType: "S",
        mode: "1",
        msg: form.body,
        sms_url: api_1.CAFE24_MESSAGE_API_URL
    };
    if (length > 2000 || (length > 90 && forceMessageType == interface_1.MessageType.SMS)) {
        throw new Error("message body is too big");
    }
    else if (length > 90) {
        data.smsType = "L";
    }
    if (form.isTest)
        data.testflag = "Y";
    if (form.repeat) {
        var repeat = form.repeat;
        data = __assign({}, data, { repeatFlag: "Y", repeatNum: repeat.count.toString(), repeatTime: repeat.interval.toString() });
    }
    if (form.reserve) {
        var reserve = form.reserve;
        var date = (reserve.getFullYear() + "").padStart(4, "0") +
            (reserve.getMonth() + "").padStart(2, "0") +
            (reserve.getDate() + "").padStart(2, "0");
        var time = (reserve.getHours() + "").padStart(2, "0") +
            (reserve.getMinutes() + "").padStart(2, "0") +
            (reserve.getSeconds() + "").padStart(2, "0");
        data = __assign({}, data, { rdate: date, rtime: time });
    }
    var messageType = data.smsType === "S" ? interface_1.MessageType.SMS : interface_1.MessageType.LMS;
    return {
        data: data,
        messageType: messageType
    };
}
exports.makeMessageSendData = makeMessageSendData;
